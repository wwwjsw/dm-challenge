{"version":3,"sources":["logo.svg","ShoppingList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ShoppingUl","styled","ul","_templateObject","ShoppingLi","li","_templateObject2","ShoppingName","h3","_templateObject3","ShoppingButton","button","_templateObject4","ShoppingList","item","i","this","props","handleRemove","handleOpenModal","_this","react_default","a","createElement","items","map","key","id","text","onClick","openModal","removeItem","Component","App","div","App_templateObject","LogoSpin","keyframes","App_templateObject2","Logo","img","App_templateObject3","FormItem","form","App_templateObject4","FormInput","input","_templateObject5","FormSubmit","_templateObject6","AppHeader","header","_templateObject7","Modal","_templateObject8","ModalButton","_templateObject9","ModalTitle","h1","_templateObject10","ModalId","h2","_templateObject11","MarketList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","showModal","actualItem","handleChange","bind","assertThisInitialized","handleSubmit","handleCloseModal","setState","filter","el","className","src","logo","alt","onSubmit","htmlFor","onChange","value","length","src_ShoppingList","lib_default","isOpen","onRequestClose","closeModal","ariaHideApp","e","target","preventDefault","newItem","Date","now","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98aaa122.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d002512a.svg\";","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst ShoppingUl = styled.ul`\n  background: #333;\n  display:flex;\n  flex-direction:column;\n  margin:0;\n  padding:0;\n`;\n\nconst ShoppingLi = styled.li`\n  list-style:none;\n  width:100%;\n  border-bottom: 5px #111 solid;\n`;\n\nconst ShoppingName = styled.h3`\n  flex-grow:1;\n`;\nconst ShoppingButton = styled.button`\n  border: none;\n  flex-grow:3;\n  height:30px;\n  &:hover{\n    background: #fff;\n  }\n`;\n\nclass ShoppingList extends Component {\n  \n    removeItem(item, i) {\n      this.props.handleRemove(item, i);\n    }\n  \n    openModal(item) {\n      this.props.handleOpenModal(item);\n    }\n  \n    render() {\n      return (\n        <ShoppingUl>\n          {this.props.items.map((item, i) => (\n            <ShoppingLi key={item.id}>\n              <ShoppingName>\n                {item.text}\n              </ShoppingName>\n              <ShoppingButton\n              onClick={() => this.openModal(item)}>\n                View\n              </ShoppingButton>\n              \n              <ShoppingButton \n                onClick={() => this.removeItem(item, i)}\n                key={item}>\n                  Remove\n              </ShoppingButton>\n            </ShoppingLi>\n          ))}   \n        </ShoppingUl>\n      );\n    }\n}\n\nexport default ShoppingList;","import React, { Component } from 'react';\nimport ReactModal from 'react-modal';\nimport ShoppingList from './ShoppingList';\nimport logo from './logo.svg';\nimport styled, {keyframes} from 'styled-components';\n\nconst App = styled.div`\n  text-align: center;\n`;\n\nconst LogoSpin = keyframes`\n  0% {\n    top:0px;\n  }\n  25% {\n    top: 15px;\n  }\n  50% {\n    top:30px;\n  }\n  100% {\n    top:0px;\n  }\n`;\n\nconst Logo = styled.img`\n  animation: ${LogoSpin} infinite 4s linear;\n  height: 40vmin;\n  pointer-events: none;\n  position:relative;\n`;\n\nconst FormItem = styled.form`\n  background: #3F51B5;\n  padding:2em;\n  display: flex;\n  flex-direction:column;\n`;\n\nconst FormInput = styled.input`\n  border:none;\n  margin-top:5%;\n  padding:5%;\n`;\nconst FormSubmit = styled.button`\n  margin-top:5%;\n  border: none;\n  padding: 5%;\n  &:hover {\n    background:#fff;\n  }\n`;\nconst AppHeader = styled.header`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nconst Modal = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: #666;\n  text-align:center;\n  width:100%;\n`;\n\nconst ModalButton = styled.button`\n  border: none;\n  padding: 5%;\n  &:hover {\n    background:#fff;\n  }  \n`;\nconst ModalTitle = styled.h1`\n  font-size:1.3em;\n`;\n\nconst ModalId = styled.h2`\n  \n`;\n\nclass MarketList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      items: [], \n      text: '',\n      showModal: false,\n      actualItem:[]};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.handleOpenModal = this.handleOpenModal.bind(this);\n    this.handleCloseModal = this.handleCloseModal.bind(this);\n  }\n  \n  handleRemove(item, i) {\n    this.setState({\n      items: this.state.items.filter(el => el !== item)\n    })\n  }\n\n  handleCloseModal () {\n    this.setState({ showModal: false });\n  }\n\n  render() {\n    return (\n      <App className=\"App\">\n        <AppHeader className=\"App-header\">\n          <Logo src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h3>Shopping list</h3>\n          <FormItem onSubmit={this.handleSubmit}>\n            <label htmlFor=\"new-item\">\n              What needs to be bought? \n            </label>\n            <FormInput\n              id=\"new-item\"\n              onChange={this.handleChange}\n              value={this.state.text}\n            />\n            <FormSubmit>\n              Add item #{this.state.items.length + 1}\n            </FormSubmit>\n          </FormItem>\n          <ShoppingList \n            items={this.state.items}\n            handleRemove={this.handleRemove}\n            handleOpenModal={this.handleOpenModal}/>\n        </AppHeader>\n        <ReactModal\n          isOpen={this.state.showModal}\n          item={this.state.actualItem}\n          onRequestClose={this.closeModal}\n          ariaHideApp={true}>\n            <Modal>\n              <ModalButton onClick={this.handleCloseModal}>Close details</ModalButton>\n              <ModalTitle>{this.state.actualItem.text}</ModalTitle>\n              <ModalId>Id: {this.state.actualItem.id}</ModalId>  \n            </Modal>\n        </ReactModal>\n      </App>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (!this.state.text.length) {\n      return;\n    }\n    const newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState(state => ({\n      items: state.items.concat(newItem),\n      text: ''\n    }));\n  }\n\n  handleOpenModal (item) {\n    this.setState({ \n      showModal: true,\n      actualItem: item});\n  }\n}\nexport default MarketList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}